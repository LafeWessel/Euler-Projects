# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

from EulerProblem import EulerProblem

class EvenFibonacci(EulerProblem):

    def __init__(self):
        self.name = "Even Fibonacci"
        self.result = 0
    # end def

    def run(self):
        nums = [0, 1]
        max_num = 4000000
        latest_num = 1

        #
        while latest_num < max_num:
            nums.append(self.next_fibonacci(nums[-2], nums[-1]))
            latest_num = nums[-1]
        # end while

        nums = [t for t in nums if t % 2 == 0]
        self.result = sum(nums)
        return
    # end def

    # calculate fibonacci number
    def next_fibonacci(self, previous: int, current: int):
        return previous + current
    # end def
